name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8

      - name: Lint code
        run: flake8 .

  sonarQube:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SonarQube
        uses: sonarsource/sonarqube-scan-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t flask-app:latest .

      - name: Push Docker image
        run: |
          docker tag flask-app:latest muhammad679/flask-app:latest
          docker push muhammad679/flask-app:latest
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Load Docker image into kind cluster
        run: kind load docker-image flask-app:latest --name kind-kind

      - name: Deploy to Blue namespace
        run: |
          kubectl apply -f k8s/blue/
          kubectl rollout status deployment/flask-app -n blue

      - name: Health check Blue
        run: |
          kubectl run health-check --rm -i --tty --image=appropriate/curl -- curl -f http://flask-app.blue.svc.cluster.local/health || exit 1

      - name: Deploy to Green namespace
        run: |
          kubectl apply -f k8s/green/
          kubectl rollout status deployment/flask-app -n green

      - name: Health check Green
        run: |
          kubectl run health-check --rm -i --tty --image=appropriate/curl -- curl -f http://flask-app.green.svc.cluster.local/health || exit 1

      - name: Switch traffic to Green
        run: kubectl apply -f k8s/switch-to-green.yaml
